version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: asked-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: asked_db
      MYSQL_USER: asked_user
      MYSQL_PASSWORD: your_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    networks:
      - asked-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Spring Boot Backend
  backend:
    build: .
    container_name: asked-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/asked_db?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=asked_user
      - SPRING_DATASOURCE_PASSWORD=your_password
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
    volumes:
      - uploads_data:/app/uploads
      - flashcards_data:/app/flashcards
      - quizzes_data:/app/quizzes
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - asked-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend
  frontend:
    build: ./frontend
    container_name: asked-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - asked-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: asked-nginx
    restart: unless-stopped
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - asked-network

volumes:
  mysql_data:
    driver: local
  uploads_data:
    driver: local
  flashcards_data:
    driver: local
  quizzes_data:
    driver: local

networks:
  asked-network:
    driver: bridge 