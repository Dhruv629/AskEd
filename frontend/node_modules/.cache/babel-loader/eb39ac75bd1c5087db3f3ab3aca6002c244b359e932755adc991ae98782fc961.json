{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bdhru\\\\OneDrive\\\\Desktop\\\\backend\\\\frontend\\\\src\\\\components\\\\PdfTextExtractor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PdfTextExtractor = ({\n  filename,\n  onExtracted\n}) => {\n  _s();\n  const [extractedText, setExtractedText] = useState('');\n  const [loading, setLoading] = useState(false);\n  const handleExtract = async () => {\n    if (!filename) {\n      alert(\"No file uploaded yet.\");\n      return;\n    }\n    setLoading(true);\n    try {\n      const res = await axios.get(`http://localhost:8080/extract?filename=${filename}`);\n      setExtractedText(res.data);\n      if (onExtracted) onExtracted(res.data);\n    } catch (err) {\n      console.error(\"Failed to extract:\", err);\n      setExtractedText(\"Failed to extract text.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 border-2 border-blue-200 rounded-xl shadow bg-white/90 mb-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-lg font-bold mb-2 text-blue-700\",\n      children: \"Extract Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleExtract,\n      className: \"px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg font-semibold shadow focus:outline-none focus:ring-2 focus:ring-green-400 focus:ring-offset-2 transition-all duration-200 disabled:opacity-60 disabled:cursor-not-allowed\",\n      disabled: loading,\n      children: loading ? \"Extracting...\" : \"Extract Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 whitespace-pre-wrap text-blue-900 text-sm\",\n      children: extractedText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(PdfTextExtractor, \"96CsodjitBssMs0GSa+glRPtae4=\");\n_c = PdfTextExtractor;\nexport default PdfTextExtractor;\nvar _c;\n$RefreshReg$(_c, \"PdfTextExtractor\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","PdfTextExtractor","filename","onExtracted","_s","extractedText","setExtractedText","loading","setLoading","handleExtract","alert","res","get","data","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/bdhru/OneDrive/Desktop/backend/frontend/src/components/PdfTextExtractor.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst PdfTextExtractor = ({ filename, onExtracted }) => {\r\n  const [extractedText, setExtractedText] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleExtract = async () => {\r\n    if (!filename) {\r\n      alert(\"No file uploaded yet.\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const res = await axios.get(`http://localhost:8080/extract?filename=${filename}`);\r\n      setExtractedText(res.data);\r\n      if (onExtracted) onExtracted(res.data);\r\n    } catch (err) {\r\n      console.error(\"Failed to extract:\", err);\r\n      setExtractedText(\"Failed to extract text.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4 border-2 border-blue-200 rounded-xl shadow bg-white/90 mb-4\">\r\n      <h2 className=\"text-lg font-bold mb-2 text-blue-700\">Extract Text</h2>\r\n      <button\r\n        onClick={handleExtract}\r\n        className=\"px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg font-semibold shadow focus:outline-none focus:ring-2 focus:ring-green-400 focus:ring-offset-2 transition-all duration-200 disabled:opacity-60 disabled:cursor-not-allowed\"\r\n        disabled={loading}\r\n      >\r\n        {loading ? \"Extracting...\" : \"Extract Text\"}\r\n      </button>\r\n      <div className=\"mt-4 whitespace-pre-wrap text-blue-900 text-sm\">{extractedText}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PdfTextExtractor;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EACtD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMY,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,CAACP,QAAQ,EAAE;MACbQ,KAAK,CAAC,uBAAuB,CAAC;MAC9B;IACF;IAEAF,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMG,GAAG,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAC,0CAA0CV,QAAQ,EAAE,CAAC;MACjFI,gBAAgB,CAACK,GAAG,CAACE,IAAI,CAAC;MAC1B,IAAIV,WAAW,EAAEA,WAAW,CAACQ,GAAG,CAACE,IAAI,CAAC;IACxC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEF,GAAG,CAAC;MACxCR,gBAAgB,CAAC,yBAAyB,CAAC;IAC7C,CAAC,SAAS;MACRE,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACER,OAAA;IAAKiB,SAAS,EAAC,iEAAiE;IAAAC,QAAA,gBAC9ElB,OAAA;MAAIiB,SAAS,EAAC,sCAAsC;MAAAC,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtEtB,OAAA;MACEuB,OAAO,EAAEd,aAAc;MACvBQ,SAAS,EAAC,2OAA2O;MACrPO,QAAQ,EAAEjB,OAAQ;MAAAW,QAAA,EAEjBX,OAAO,GAAG,eAAe,GAAG;IAAc;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC,eACTtB,OAAA;MAAKiB,SAAS,EAAC,gDAAgD;MAAAC,QAAA,EAAEb;IAAa;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClF,CAAC;AAEV,CAAC;AAAClB,EAAA,CApCIH,gBAAgB;AAAAwB,EAAA,GAAhBxB,gBAAgB;AAsCtB,eAAeA,gBAAgB;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}